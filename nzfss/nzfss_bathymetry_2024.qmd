---
title: Morphometric distribution of depth and basin shape in Aotearoa New Zealand lakes
subtitle: Using machine learning to improve national lake depth predictions
format: 
  revealjs:
    theme: dark
    logo: www/limnotrack_border.jpg
    title-slide-attributes:
      data-state: "hide-menubar"
    footer: ""
    toc: false
    # template-partials:
    #   - title-slide.html
    transition: slide
    background-transition: fade
    controls: true
    controls-layout: bottom-right
    chalkboard: false
    menu: false
    view-distance: 100
    simplemenu:
        flat: true
        barhtml:
            header: "<div class='menubar'><ul class='menu'></ul><div>"
        scale: 0.2
revealjs-plugins:
    - simplemenu
author:
  - name: Tadhg Moore, Chris McBride, Deniz Özkundakci, Mathew Allen, Moritz K Lehmann, Matthew J Prentice, Whitney Woelmer, Maggie Armstrong, Kevin Rose
    # affiliation: Limnotrack, The University of Waikato, Waikato Regional Council, Starboard Maritime Intelligence, Rensselaer Polytechnic Institute
    # orcid: 0000-0002-3834-8868
    # email:
  #   affiliation: Limnotrack
  #   # orcid: 0000-0002-3834-8868
  #   # email: tadhg@limnotrack.com
  # - name: Chris McBride
  #   affiliation: Limnotrack
  # - name: Deniz Özkundakci
  #   affiliation: The University of Waikato
  # - name: Mathew Allen
  #   affiliation: Waikato Regional Council
  # - name: Moritz K Lehmann
  #   affiliation: Starboard Maritime Intelligence
  # - name: Matthew J Prentice
  #   affiliation: The University of Waikato
  # - name: Whitney Woelmer
  #   affiliation: The University of Waikato
  # - name: Maggie Armstrong
  #   affiliation: The University of Waikato
  # - name: Kevin Rose
  #   affiliation: Rensselaer Polytechnic Institute
editor: visual
editor_options: 
  chunk_output_type: console
bibliography: references.bib
date: "2024-11-19"
css: style.css
---

```{r}
#| label: setup

library(sf)
fenz_depths <- readRDS("data/fenz_depths.rds") |> 
  dplyr::filter(!is.na(z_max), !is.na(GeomorphicType))
n_fenz <- nrow(fenz_depths)

lernz_depths <- read.csv("data/lernz_depths.csv")
lyr <- readRDS("data/lyr.rds")
id_names <- lyr |> 
  sf::st_drop_geometry() |>
  dplyr::select(id_final, name_final)

gm_type <- lyr |> 
  sf::st_drop_geometry() |> 
  dplyr::select(id_final, GeomorphicType) 

lake_summ <- read.csv("data/lake_bathy_summary.csv") |> 
  dplyr::left_join(gm_type, by = c("id_final" = "id_final"))

n_bathy <- sum(!is.na(lake_summ$z_mean))
n_depths <- sum(!is.na(lake_summ$z_max))

library(ggplot2)
library(plotly)
library(bathytools)
library(tidyr)

# Set geomorphology colours
geomorph_class <- unique(fenz_depths$GeomorphicType)
geomorph_class <- geomorph_class[!is.na(geomorph_class)]
geomorph_class <- c(geomorph_class, "Unknown")
geomorph_cols <- RColorBrewer::brewer.pal(length(geomorph_class), "Set3")
names(geomorph_cols) <- geomorph_class

# Set source colours
source_cols <- c("FENZ" = "#8DA0CB", "Hydrolakes" = "#FC8D62", 
                 "GloBATHY" = "#A6D854", "ML model" = "black")
sc_df <- data.frame(source = names(source_cols), col = source_cols)

library(tmap)
# bmap <- paste0("https://basemaps.linz.govt.nz/v1/tiles/aerial/WebMercatorQuad/{z}/{x}/{y}.webp?api=", 
#                Sys.getenv("LINZ_BASEMAP_KEY"))
# tmap_options(basemaps = "https://basemaps.linz.govt.nz/v1/tiles/aerial/WebMercatorQuad/{z}/{x}/{y}.webp?api=c01hsah0ttthgq51dgrqbw9r2bd", check.and.fix = TRUE)

# Load R functions
source("R/summarise_hyps.R")

```

## Motivation {.smaller data-name="Background"}

-   Developing the Lake Ecosystem Research New Zealand modelling platfom (LERNZmp). ![](www/lernzmp_logo.png){width="105"}
-   Lake depth and morphometry are key drivers of lake ecosystem function, therefore accurate depth data is essential [@ganz2024].
-   The Freshwater Ecosystems New Zealand (FENZ) database is the most comprehensive database of lake morphometry in New Zealand, but is limited in its depth data.
-   NZ lakes provide a unique opportunity to develop a comprehensive database of lake depth and morphometry, particularly given the diversity of lake size, depth and geomorphic type.

## Objectives {.unnumbered .unlisted}

-   Develop a comprehensive database of lake depth and morphometry for New Zealand.
-   Use machine learning to predict mean and maximum lake depth from this data.
-   Compare these predictions to the FENZ database and other global lake depth databases e.g. maximum lake depths - GLOBathy[@khazaei2022] and mean lake depth - HydroLAKES [@messager2016]

##  {.smaller}

FENZ Lakes

::::: columns
::: {.column width="40%"}
-   Lack of a central database on lake morphometry, particularly depth
-   Large number of bathymetric data has been recorded across lakes in New Zealand
-   Current predictions of max lake depth, within the FENZ database (n=`r n_fenz`) are limited and have clear biases
:::

::: {.column width="60%" .fragment}
```{r}
#| label: fig-fenz-depth-distribution
#| fig.cap: "Depth distribution of FENZ lakes. The x-axis is log10 scaled."
#| fig.width: 6
#| fig.height: 4

labs <- fenz_depths |> 
  sf::st_drop_geometry() |> 
  dplyr::group_by(GeomorphicType) |>
  dplyr::summarise(n = dplyr::n()) |>
  dplyr::mutate(label = paste0(GeomorphicType, " (n=", n, ")"))

df <- fenz_depths |> 
  sf::st_drop_geometry() |> 
  dplyr::left_join(labs, by = "GeomorphicType") |> 
  dplyr::rename(Depth = z_max) |> 
  dplyr::mutate(Depth = round(Depth, 1))

cols_df <- data.frame(name = names(geomorph_cols), col = geomorph_cols) |> 
  dplyr::left_join(labs, by = c("name" = "GeomorphicType")) |> 
  dplyr::filter(!is.na(n))

cols <- setNames(cols_df$col, cols_df$label)

# plot_ly() |>
#   add_histogram(data = df, x = ~log10(z_max), color = ~GeomorphicType,
#                 colors = geomorph_cols, opacity = 1,
#                 marker = list(line = list(color = "black", width = 1))) |>
#   layout(
#     xaxis = list(title = "log10(Depth)"),
#     yaxis = list(title = "Frequency"),
# legend = list(orientation = "h", x = 0.2, y = -0.2),
# barmode = "stack"#,
# updatemenus = list(
#   list(
#     type = "buttons",  # Using buttons to control color visibility
#     x = 0.1,  # Positioning of the button
#     y = 1.05,  # Positioning of the button
#     buttons = list(
#       list(
#         label = "Fill Color On",
#         method = "restyle",
#         args = list("opacity", 1)  # Set fill color on by controlling opacity
#       ),
#       list(
#         label = "Fill Color Off",
#         method = "restyle",
#         args = list("opacity", 0.5)  # Set fill color off by controlling opacity
#       )
#     )
#   )
# )
# )




# ggplot() +
#   geom_point(data = df, aes(x = area_Ha, y = z_max, colour = GeomorphicType),
#              alpha = 0.5, size = 1) +
#   scale_y_log10(breaks = c(1, 5, 10, 20, 50, 100, 400)) +
#   scale_x_log10(breaks = c(1, 5, 10, 50, 100, 1000)) +
#   labs(x = "Area (ha)", y = "Depth (m)")+
#   theme_bw(base_size = 16)

p <- ggplot() +
  geom_histogram(data = df, aes(x = Depth, fill = label),
                 bins = 30) +
  scale_x_log10(breaks = c(1, 5, 10, 50, 100, 400)) +
  scale_fill_manual(values = cols) +
  labs(y = "Count", x = "Depth (m)", fill = "Geomorphic type") +
  theme_bw(base_size = 14)+
  theme(legend.position="bottom", legend.box = "horizontal",
    legend.title = element_text(size = 10),
        legend.text = element_text(size = 10)) 

# Legend
l <- list(
  font = list(
    family = "sans-serif",
    size = 12,
    color = "#000"),
  x = 0.7, y = 0.95,
  bgcolor = "#FFFFFF",
  bordercolor = "#FFFFFF",
  borderwidth = 2)

ggplotly(p, height = 500, width = 600) |> 
  layout(showlegend = T,
    legend = l)



# library(plotly)
# plot_ly() |> 
#   add_histogram(data = fenz_depths, x = ~z_max, nbins = 50) |>
#   layout(xaxis = list(title = "Depth (m)", type = "log"),
#          yaxis = list(title = "Frequency"))
# add_markers(data = fenz_depths, x = ~area_Ha, y = ~z_max,
#             opacity = 0.3) |> 
# layout(xaxis = list(type = "log", title = "Area (ha)"),
#        yaxis = list(type = "log", title = "Depth (m)"))

```
:::
:::::

## Methods {.smaller data-name="Methods"}

::: fragment
-   Bathymetry survey data were sourced from a variety of sources - paper maps, digital files, and online databases (n=`r n_bathy`).
:::

::: fragment
-   Lake maximum depth data which were known, but did not have bathymetry data available were added to the dataset (n=`r n_depths - n_bathy`) bringing us to a total of `r n_depths` lakes with maximum depth data.
:::

::: fragment
-   Shoreline data were updated using satellite and aerial imagery.
:::

::: fragment
-   Depth data were interpolated using a Multilevel B-Spline Approximation (MBA) algorithm. 
:::

::: {.fragment}
-   Hypsographic curves were calculated for each lake. 
:::
::: {.fragment}
-   Comparison of depth and area with other databases.
:::

::: {.fragment}
-   Used machine learning to predict lake depth from morphometric data for all lakes in New Zealand and benchmark against the FENZ dataset. 
:::

## Bathymetry example: Lake Rotoma {.smaller .unnumbered .unlisted transition="fade"}

Depth contours

```{r}
#| label: fig-rotoma-contours
#| fig.cap: "Depth contours of Lake Rotoma, a large lake in the Bay of Plenty region."

cont <- readRDS("data/bathy_contours/LID40102_rotoma.rds") 
shoreline <- lyr |> 
  dplyr::filter(id_final == "LID 40102") 
brks <- seq(min(cont$depth, na.rm = TRUE), 0, length.out = 5)


tmap_mode("view")
tm_shape(cont, name = "Depth contours") +
  tm_lines(col = "depth", palette = "Blues", lwd = 1, style = "cont",
           breaks = brks, title.col = "Depth (m)") +
  tm_shape(shoreline, name = "Shoreline") +
  tm_borders(col = "black", lwd = 2) 


```

## Bathymetry example: Lake Rotoma {.smaller .unnumbered .unlisted transition="fade"}

Bathymetry raster

```{r}
#| label: fig-rotoma-raster
#| fig.cap: "Depth raster of Lake Rotoma, a large lake in the Bay of Plenty region."

bathy <- bathytools::rasterise_bathy(shoreline = shoreline, contours = cont, 
                                     res = 12, crs = 2193, print_plot = FALSE)

tm_shape(bathy) +
  tm_raster(palette = "Blues", title = "Depth (m)", breaks = brks, 
            style = "cont") +
  tm_shape(shoreline, name = "Shoreline") +
  tm_borders(col = "black", lwd = 2) 


```

## Bathymetry example: Lake Rotoma {.smaller .unnumbered .unlisted .center transition="fade"}

Estimated lake bed

```{r}
#| label: fig-rotoma-bathymetry-3d
#| fig.cap: "Three dimensional rendering of Lake Rotoma's bathymetry."

bathytools::plot_raster_3d(x = bathy, cols = "bathy", shoreline = shoreline) |> layout(height = 450, width = 700)

```

## Bathymetry example: Lake Rotoma {.smaller .unnumbered .unlisted transition="fade"}

::::: columns
::: {.column width="50%"}
Estimated hypsographic curve

```{r}
#| label: fig-rotoma-hypsograph
#| fig.cap: "Hypsograph curve of Lake Rotoma."
#| fig.width: 6
#| fig.height: 4

hyps <- bathy_to_hypso(bathy_raster = bathy)
elevation <- lake_summ |> 
  dplyr::filter(id_final == "LID 40102") |> 
  dplyr::pull(elevation)
hyps <- hyps |> 
  dplyr::mutate(elev = elevation + depth)

p <- ggplot() +
  geom_point(data = hyps, aes(y = depth, x = area)) +
  geom_line(data = hyps, aes(y = depth, x = area)) +
  labs(y = "Depth (m)", x = bquote("Area"~(m^2))) +
  theme_bw(base_size = 16)
p
# ggplotly(p, height = 500, width = 500)

summ <- summarise_hyps(hyps = hyps, shoreline = shoreline) |> 
  dplyr::mutate(Lake = "Rotoma") |>
  dplyr::select(Lake, Z_max, Z_mean, DV, area_Ha, shore_length, sdi) |>
  dplyr::rename(`Max depth` = Z_max, `Mean depth` = Z_mean, `Shoreline development index` = sdi, `Volume development index` = DV, `Shoreline length (km)` = shore_length, `Area (ha)` = area_Ha) 

```
:::

::: {.column .fragment width="50%"}
Hypsographic summary

```{r}
#| label: tbl-rotoma-hyps
#| tbl.cap: "Hypsographic summary of Lake Rotoma"

summ |>
  tidyr::pivot_longer(cols = -Lake, names_to = "Variable", values_to = "Value") |> 
  dplyr::select(-Lake) |> 
  knitr::kable(caption = "Hypsographic summary of Lake Rotoma") 

```
:::
:::::

## Lakes with bathymetry data {.smaller .unnumbered .unlisted}

::::: columns
::: {.column width="50%"}
-   Lakes with bathymetric data are relatively evenly distributed across New Zealand.
-   Lake geomorphic type is highly regionalised.
-   Lakes which have maximum depth data but no bathymetry data highlight that there is probably a further bathymetry data out there.

-   Some lakes, particularly glacial lakes might have quite a dynamic bathymetry.
:::

::: {.column width="50%"}
```{r}
#| label: fig-fenz-map
#| fig.cap: "Map of lakes with bathymetric data and maximum depth data in New Zealand. Lakes with bathymetry data have a black marker."
#| fig.width: 3.75
#| fig.height: 5

nz_region_clip <- readRDS("data/nz_region_clip.rds")
# tmap_mode("view")
# tm_shape(nz_region_clip, name = "Region") +
#   tm_borders(col = "black", lwd = 2)
# 
tmap_mode("plot")

depth_lakes <- lyr |> 
  dplyr::filter(id_final %in% lernz_depths$id_final, !is.na(max_depth)) |> 
  sf::st_point_on_surface()
bathy_lakes <- depth_lakes |> 
  dplyr::filter(bathy)

tm_shape(nz_region_clip, name = "Region") +
  tm_fill(col = "legend_name", title = "Region", alpha = 0.8, legend.show = F) +
  tm_layout(legend.position = c("left", "top")) +
  tm_shape(depth_lakes, name = "Lake marker") +
  tm_symbols(col = "GeomorphicType", size = 0.3, title.col = "Geomorphic type",
             palette = geomorph_cols) +
  tm_shape(bathy_lakes, name = "Bathy lakes") +
  tm_symbols(col = "black", size = 0.05) +
  tm_compass(position = c("right", "top")) +
  tm_scale_bar(text.size = 0.6, position = c("right", "bottom")) 

```
:::
:::::

## Depth-area relationship {.smaller .unnumbered .unlisted data-name="Results" transition="fade"}

```{r}
#| label: fig-depth-area-latitude
#| fig-cap: Summary of measured lake area and max depth by latitude and elevation (n=192). The size of the point represents the elevation of the lake.

df <- lake_summ |> 
  dplyr::rename(Area = area_Ha, Depth = z_max, Elevation = elevation, 
                Latitude = lat, `Geomorphic type` = GeomorphicType) |>
  # Round all numeric to 2 digits
  dplyr::mutate_if(is.numeric, ~round(., 2))

p <- ggplot() +
  geom_point(data = df, aes(x = Area, y = Depth, color = Latitude,
                            size = Elevation)) +
  # scale_colour_fermenter(palette = "RdYlBu") +
  scale_color_viridis_c() +
  scale_size_binned(breaks = c(0, 250, 500, 750, 1000, 2000)) +
  scale_y_log10(breaks = c(1, 5, 10, 20, 50, 100, 400)) +
  scale_x_log10(breaks = c(1, 5, 10, 50, 100, 1000, 10000)) +
  # annotation_logticks() +
  labs(x = "Area (ha)", y = "Depth (m)", color = "Latitude", 
       size = "Elevation\n(masl)")+
  theme_bw(base_size = 16)
# p

ggplotly(p, height = 500, width = 700)

```

## Breakdown by geomorphic type {.smaller .unnumbered .unlisted transition="fade"}

```{r}
#| label: fig-depth-area-gmtype
#| fig-cap: Summary of measured lake area and max depth by geomorphic type.

labs <- df |> 
  dplyr::group_by(`Geomorphic type`) |>
  dplyr::summarise(n = dplyr::n()) |>
  dplyr::mutate(Type = paste0(`Geomorphic type`, " (n=", n, ")"))

cols_df <- data.frame(name = names(geomorph_cols), col = geomorph_cols) |> 
  dplyr::left_join(labs, by = c("name" = "Geomorphic type")) |> 
  dplyr::filter(!is.na(n))
cols <- setNames(cols_df$col, cols_df$Type)

df <- df |> 
  dplyr::left_join(labs, by = "Geomorphic type")

p <- ggplot() +
  geom_point(data = df, aes(x = Area, y = Depth, color = Type)) +
  geom_smooth(data = df, aes(x = Area, y = Depth, color = Type),
              method = "lm", se = FALSE) +
  scale_color_manual(values = cols) +
  scale_y_log10(breaks = c(1, 5, 10, 20, 50, 100, 400)) +
  scale_x_log10(breaks = c(1, 5, 10, 50, 100, 1000)) +
  labs(x = "Area (ha)", y = "Depth (m)", color = "Geomorphic\ntype")+
  theme_bw(base_size = 14)
# p
ggplotly(p, height = 500, width = 700)

```

## Distribution of lake hypsograph shape

```{r}
#| label: fig-hypsograph-gmtype
#| fig.cap: "Distribution of hypsograph shape by geomorphic type. Solid black line indicated the median and the dashed red line represents the 1:1 line."

all_hyps <- readRDS("data/all_hyps.rds")

# Calculate the median hypsograph
median_hyps <- all_hyps |> 
  # dplyr::filter(!is.na(GeomorphicType)) |>
  dplyr::group_by(LID) |> 
  dplyr::reframe(norm_area = approx(norm_depth, norm_area, seq(0, 1, 0.05),
                                     rule = 2)$y,
                 GeomorphicType = GeomorphicType[1],
                 n_depth = seq(0, 1, 0.05)) |>
  dplyr::group_by(n_depth) |>
  dplyr::summarise(n_area = median(norm_area),
                   mean_area = mean(norm_area),
                   std = sd(norm_area),
                   q1 = mean_area - std,
                   q3 = mean_area + std
                   # q1 = quantile(norm_area, 0.25),
                   # q3 = quantile(norm_area, 0.75)
                   ) |>
  dplyr::mutate(q1 = ifelse(q1 < 0, 0, q1),
                q3 = ifelse(q3 > 1, 1, q3),
                GeomorphicType = "Median") |>
  dplyr::ungroup() |> 
    dplyr::rename(`Geomorphic type` = GeomorphicType, `Normalised area` = n_area, `Normalised depth` = n_depth)


# Calculate the Geomorphic Type median hypsograph
gm_hyps <- all_hyps |> 
  dplyr::filter(!is.na(GeomorphicType)) |>
  dplyr::group_by(LID) |> 
  dplyr::reframe(norm_area = approx(norm_depth, norm_area, seq(0, 1, 0.05),
                                     rule = 2)$y,
                 GeomorphicType = GeomorphicType[1],
                 n_depth = seq(0, 1, 0.05)) |>
  dplyr::group_by(GeomorphicType, n_depth) |>
  dplyr::summarise(n_area = median(norm_area),
                   mean_area = mean(norm_area),
                   std = sd(norm_area),
                   q1 = mean_area - std,
                   q3 = mean_area + std
                   # q1 = quantile(norm_area, 0.25),
                   # q3 = quantile(norm_area, 0.75)
                   ) |> 
  dplyr::rename(`Geomorphic type` = GeomorphicType, `Normalised area` = n_area, `Normalised depth` = n_depth)

cols <- c(geomorph_cols, "Median" = "black")

p <- ggplot() +
  geom_line(data = gm_hyps, aes(x = `Normalised area`, y = `Normalised depth`, color = `Geomorphic type`)) +
  geom_line(data = median_hyps, aes(x = `Normalised area`, y = `Normalised depth`, color = `Geomorphic type`), linewidth = 2, alpha = 0.5) +
  geom_abline(intercept = -1, slope = 1, linetype = "dashed", color = "red") +
  scale_color_manual(values = cols) +
  scale_y_reverse() +
  labs(x = "Normalised area", y = "Normalised depth", color = "Geomorphic type") +
  coord_equal() +
  theme_bw(base_size = 14) 
p

ggplotly(p, height = 500, width = 700)

```


## Distribution of volume development

Development of Volume, $D_V$ (Hutchinson 1957) is a measure of departure of the shape of the lake basin from that of a cone calculated using the maximum depth $Z_{max}$ and the average depth $\bar{Z}$ :

$$D_V = \frac{3 \times \bar{Z}}{Z_{max}}$$ $D_V$ is greatest in shallow lakes with flat bottoms and low in deep lakes with steep sides.

##  {.unnumbered .unlisted}

```{r}
#| label: fig-dv-ridges
#| fig.cap: "Distribution of volume development (DV) by geomorphic type."
#| fig.width: 6

library(ggridges)
lab <- lake_summ |> 
  dplyr::filter(!is.na(DV)) |>
  dplyr::group_by(GeomorphicType) |>
  dplyr::summarise(n = dplyr::n(), mean_dv = mean(DV)) |>
  dplyr::mutate(label = paste0(GeomorphicType, " (n=", n, ")")) |> 
  dplyr::arrange(dplyr::desc(mean_dv))

df <- lake_summ |> 
  dplyr::left_join(lab, by = "GeomorphicType") |> 
  dplyr::filter(n > 1) |>
  dplyr::arrange(mean_dv) |> 
  dplyr::mutate(label = factor(label, levels = lab$label))

cols_df <- data.frame(name = names(geomorph_cols), col = geomorph_cols) |> 
  dplyr::left_join(lab, by = c("name" = "GeomorphicType")) |> 
  dplyr::filter(!is.na(n))
cols <- setNames(cols_df$col, cols_df$label)


p <- ggplot() +
  stat_density_ridges(data = df, aes(x = DV, y = label, fill = label), 
                      alpha = 0.5, quantile_lines = TRUE, quantiles = c(0.25, 0.5, 0.75), 
                      jittered_points = TRUE, point_shape = '|', alpha = 0.7, point_size = 3,
                      position = position_points_jitter(width = 0.02, height = 0)) +
  geom_density_ridges(data = df, aes(x = DV, y = label, fill = label), 
                      alpha = 0.5, quantile_lines = TRUE, 
                      quantiles = c(0.25, 0.5, 0.75), jittered_points = TRUE, 
                      point_shape = '|', alpha = 0.7, point_size = 3,
                      position = position_points_jitter(width = 0.02, height = 0)) +
  geom_vline(xintercept = 1.5, linetype = "dashed") +
  labs(x = "Volume development (DV)", y = "Density") +
  scale_x_continuous(limits = c(0, 3), breaks = seq(0, 3, 0.5)) +
  scale_fill_manual(values = cols) +
  # scale_colour_manual(values = gm_cols) +
  guides(fill = "none") +
  theme_bw(base_size = 14)
# ggplotly(p, height = 500, width = 700)
p

```

![](www/convex.png){.absolute top=30 right=60 width="140" height="90"}


![](www/concave.png){.absolute bottom=180 right=60 width="140" height="90"}


## Predicting mean and max depth {.smaller .unnumbered .unlisted}

::::::::: panel-tabset
### Methods

-   Used a random forest machine learning model from the [caret](https://topepo.github.io/caret/index.html) R package to predict mean and maximum lake depth from morphometric data [@kuhn2008].
-   Covariates included variables available for all lakes in the dataset: lake area, elevation, latitude, shoreline development index, geomorphic type and other climate and catchment characteristics.

### Max depth

::::: columns
::: {.column width="60%"}
```{css}
#| echo: false

.reveal table {
font-size: smaller;
}

```

```{r}
#| label: fig-max-depth
#| fig.cap: "Predicted vs observed max depth. Note that the x and y axes are log10 scaled."

comp_max_depth <- read.csv("data/comp_max_depth.csv") |> 
  dplyr::filter(source != "Hydrolakes") |> 
  dplyr::mutate(
    source = dplyr::case_when(
      source == "Model" ~ "ML model",
      .default = source
    ),
    label = dplyr::case_when(
      source == "ML model" ~ gsub("Model", "ML model", source),
      .default = source
    )
  ) |> 
  dplyr::rename(`Measured depth` = z_max, `Predicted depth` = LERNZmp) |> 
  dplyr::left_join(id_names, by = c("id_final" = "id_final"))


cols <- comp_max_depth |> 
  dplyr::select(source, label) |> 
  dplyr::distinct() |> 
  dplyr::left_join(sc_df, by = "source") 
cols_vec <- cols$col
names(cols_vec) <- cols$label

lims <- range(comp_max_depth$`Predicted depth`, comp_max_depth$`Measured depth`,
              # comp_mean_depth$z_mean, comp_mean_depth$LERNZmp,
              na.rm = TRUE)
brks <- c(1, 10, 100)

p <- ggplot() +
  geom_point(data = comp_max_depth, aes(x = `Measured depth`, y = `Predicted depth`, color = label)) +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
  scale_x_log10(breaks = brks) +
  scale_y_log10(breaks = brks) +
  scale_color_manual(values = cols_vec) +
  labs(x = "Measured max depth (m)", y = "Predicted max depth (m)", color = "Source") +
  coord_equal() +
  theme_bw(base_size = 14)
# p
ggplotly(p, height = 500, width = 600)

```
:::

::: {.column width="40%"}
```{r}
#| label: tbl-max-depth
#| tbl.cap: "Model fit for max depth"

tbl <- comp_max_depth |> 
  dplyr::rename(z_max = `Measured depth`, LERNZmp = `Predicted depth`) |> 
  dplyr::filter(!is.na(LERNZmp)) |> 
  dplyr::mutate(diff = LERNZmp - z_max,
                prop_error = abs(diff) / z_max) |>
  dplyr::group_by(source) |>
  dplyr::summarise(bias = mean(diff, na.rm = TRUE),
                   mae = mean(abs(diff), na.rm = TRUE),
                   rmse = sqrt(mean(diff^2, na.rm = TRUE)),
                   r2 = ifelse(all(is.na(diff)), NA, cor(LERNZmp, z_max, use = "complete.obs")^2),
                   pe = mean(prop_error, na.rm = TRUE),
                   n = sum(!is.na(diff))
  ) |>
  dplyr::mutate(source = factor(source, levels = c( "FENZ", "Hydrolakes", "GloBATHY", "ML model")),
                variable = "Lake max depth") |>
  dplyr::select(source, n, bias, rmse, r2) |>
  # Round all numeric to 2 digits
  dplyr::mutate_if(is.numeric, ~round(., 2)) |>
  dplyr::rename(R2 = r2, RMSE = rmse, Bias = bias, N = n, Source = source)

max_depth_r2 <- tbl |> 
  dplyr::filter(Source == "ML model") |> 
  dplyr::pull(R2)

fenz_max_depth_r2 <- tbl |> 
  dplyr::filter(Source == "FENZ") |> 
  dplyr::pull(R2)

tbl |>
  knitr::kable(caption = "Model fit for max depth") 
```
:::
:::::

### Mean depth

::::: columns
::: {.column width="60%"}
```{r}
#| label: fig-mean-depth
#| fig.cap: "Predicted vs observed mean depth. Note that the x and y axes are log10 scaled."

comp_mean_depth <- read.csv("data/comp_mean_depth.csv") |> 
  dplyr::filter(source != "GloBATHY", !is.na(LERNZmp)) |> 
  dplyr::mutate(
    source = dplyr::case_when(
      source == "Model" ~ "ML model",
      .default = source
    ),
    label = dplyr::case_when(
      source == "ML model" ~ gsub("Model", "ML model", source),
      .default = source
    )
  ) |> 
  dplyr::rename(`Measured depth` = z_mean, `Predicted depth` = LERNZmp) |> 
  dplyr::left_join(id_names, by = c("id_final" = "id_final"))

cols <- comp_mean_depth |> 
  dplyr::select(source, label) |> 
  dplyr::distinct() |> 
  dplyr::left_join(sc_df, by = "source") 
cols_vec <- cols$col
names(cols_vec) <- cols$label

lims <- range(comp_mean_depth$`Predicted depth`, comp_mean_depth$`Measured depth`,
              # comp_mean_depth$z_mean, comp_mean_depth$LERNZmp,
              na.rm = TRUE)
brks <- c(1, 10, 100)

p <- ggplot() +
  geom_point(data = comp_mean_depth, aes(x = `Measured depth`, y = `Predicted depth`, color = label)) +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
  scale_x_log10(breaks = brks) +
  scale_y_log10(breaks = brks) +
  scale_color_manual(values = cols_vec) +
  labs(x = "Measured mean depth (m)", y = "Predicted mean depth (m)", color = "Source") +
  coord_equal() +
  theme_bw(base_size = 14)
p
ggplotly(p, height = 500, width = 600)


# plot_ly() |> 
#   add_trace(data = comp_mean_depth, x = ~`Measured depth`,
#             y = ~`Predicted depth`, colors = cols_vec,
#             hoverinfo = "text",
#             text = paste0("Lake: ", comp_mean_depth$name_final, "<br>",
#                           "Predicted depth: ", round(comp_mean_depth$`Predicted depth`, 1), "<br>",
#                           "Measured depth: ", round(comp_mean_depth$`Measured depth`, 1), "<br>",
#                           "Source: ", comp_mean_depth$label),
#             type = "scatter", mode = "markers", color = ~label) |> 
#   add_trace(x = lims, y = lims, type = "scatter", mode = "lines", name = "1:1 line",
#             showlegend = TRUE, line = list(color = "grey")) |> 
#   layout(xaxis = list(title = "Measured mean depth (m)", type = "log", range = log10(lims)),
#          yaxis = list(title = "Predicted mean depth (m)", type = "log", range = log10(lims)),
#          legend = list(orientation = "h", x = 0.2, y = -0.2))


```
:::

::: {.column width="40%"}
```{r}
#| label: tbl-mean-depth
#| tbl.cap: "Model fit for mean depth"

tbl <- comp_mean_depth |> 
  dplyr::rename(z_mean = `Measured depth`, LERNZmp = `Predicted depth`) |> 
  dplyr::filter(!is.na(LERNZmp)) |> 
  dplyr::mutate(diff = LERNZmp - z_mean,
                prop_error = abs(diff) / z_mean) |>
  dplyr::group_by(source) |>
  dplyr::summarise(bias = mean(diff, na.rm = TRUE),
                   mae = mean(abs(diff), na.rm = TRUE),
                   rmse = sqrt(mean(diff^2, na.rm = TRUE)),
                   r2 = ifelse(all(is.na(diff)), NA, cor(LERNZmp, z_mean, use = "complete.obs")^2),
                   pe = mean(prop_error, na.rm = TRUE),
                   n = sum(!is.na(diff))
  ) |>
  dplyr::mutate(source = factor(source, levels = c( "FENZ", "Hydrolakes", "GloBATHY", "ML model")),
                variable = "Lake mean depth") |>
  dplyr::select(source, n, bias, rmse, r2) |>
  # Round all numeric to 2 digits
  dplyr::mutate_if(is.numeric, ~round(., 2)) |>
  dplyr::rename(R2 = r2, RMSE = rmse, Bias = bias, N = n, Source = source)

mean_depth_r2 <- tbl |> 
  dplyr::filter(Source == "ML model") |> 
  dplyr::pull(R2)

fenz_mean_depth_r2 <- tbl |> 
  dplyr::filter(Source == "FENZ") |> 
  dplyr::pull(R2)

tbl |>
  knitr::kable(caption = "Model fit for mean depth") 
```
:::
:::::
:::::::::

## Conclusions {.r-fit-text data-name="Conclusions"}

-   Bathymetric data from 156 lakes were digitised and collated for use in this study.

-   Using a machine learning model, we were able to predict maximum lake depth from morphometric data with an $r^2$ = `r max_depth_r2` and mean lake depth with an $r^2$ = `r mean_depth_r2`.

-   This was substantially better than the FENZ dataset, which had an $r^2$ = `r fenz_max_depth_r2` for max depth and `r fenz_mean_depth_r2` for mean depth.

## Applications {.smaller}

-   All data is available within the [LERNZmp](https://limnotrack.shinyapps.io/LERNZmp/).
-   For lakes without bathymetric data, we can predict lake depth with a high degree of accuracy compared to other datasets.
-   Highlights lakes with limited depth data to target for future surveying.
-   Provides a comprehensive database of lake depth, morphometry and other characteristics within Aotearoa New Zealand for future research.

## Acknowledgements {.smaller}

-   This project was funded by the New Zealand Ministry of Business, Innovation and Employment (MBIE) through the Smart Ideas program within the Endeavour Fund (grant UOWX2103).

-   We would like to thank all our data contributors who provided data for the LERNZmp project.

## References {.unnumbered .unlisted}

::: {#refs}
:::
